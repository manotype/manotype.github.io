var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
function createLazyContainer(loader, loadingComponent, errorComponent, onLoad) {
    return _a = (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.isComponentMounted = false;
                _this.state = {
                    Component: null,
                    ErrorComponent: errorComponent || null,
                    LoadingComponent: loadingComponent || null,
                    failed: false
                };
                return _this;
            }
            class_1.prototype.componentWillMount = function () {
                var _this = this;
                this.isComponentMounted = true;
                if (!this.state.Component) {
                    loader()
                        .then(function (module) { return module.default || module; })
                        .then(function (Component) {
                        if (_this.isComponentMounted) {
                            _this.setState({ Component: Component }, onLoad);
                        }
                    }, function () {
                        if (_this.isComponentMounted) {
                            _this.setState({ failed: true });
                        }
                    });
                }
            };
            class_1.prototype.componentWillUnmount = function () {
                this.isComponentMounted = false;
            };
            class_1.prototype.render = function () {
                var _a = this.state, Component = _a.Component, LoadingComponent = _a.LoadingComponent, ErrorComponent = _a.ErrorComponent, failed = _a.failed;
                if (Component) {
                    return (React.createElement(Component, __assign({}, this.props)));
                }
                if (failed && ErrorComponent) {
                    return React.createElement(ErrorComponent, null);
                }
                if (LoadingComponent) {
                    return React.createElement(LoadingComponent, null);
                }
                return null;
            };
            return class_1;
        }(React.Component)),
        _a.displayName = 'LazyContainer',
        _a;
    var _a;
}
exports.default = createLazyContainer;
